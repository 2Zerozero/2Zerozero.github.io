{"version":3,"file":"component---src-pages-index-tsx-9f12b376bc61d6daf7fd.js","mappings":"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","sources":["webpack://gatsby-starter-default/./src/components/Common/GlobalStyle.tsx","webpack://gatsby-starter-default/./src/components/Main/ProfileImage.tsx","webpack://gatsby-starter-default/./src/components/Main/Introduction.tsx","webpack://gatsby-starter-default/./src/components/Main/CategoryList.tsx","webpack://gatsby-starter-default/./src/components/Main/PostItem.tsx","webpack://gatsby-starter-default/./src/hooks/useInfiniteScroll.tsx","webpack://gatsby-starter-default/./src/components/Main/PostList.tsx","webpack://gatsby-starter-default/./node_modules/decode-uri-component/index.js","webpack://gatsby-starter-default/./node_modules/filter-obj/index.js","webpack://gatsby-starter-default/./node_modules/split-on-first/index.js","webpack://gatsby-starter-default/./node_modules/query-string/base.js","webpack://gatsby-starter-default/./node_modules/query-string/index.js","webpack://gatsby-starter-default/./src/components/Common/Footer.tsx","webpack://gatsby-starter-default/./src/components/Common/Template.tsx","webpack://gatsby-starter-default/./src/pages/index.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react'\r\nimport { Global, css } from '@emotion/react'\r\n\r\n// 기본 스타일 설정\r\nconst defaultStyle = css`\r\n  @import url('https://fonts.googleapis.com/css2?family=Noto+Sans:ital,wght@0,100..900;1,100..900&display=swap');\r\n\r\n  * {\r\n    margin: 0;\r\n    padding: 0;\r\n    box-sizing: border-box;\r\n    font-family: 'Noto Sans', sans-serif;\r\n  }\r\n\r\n  html,\r\n  body,\r\n  #___gatsby {\r\n    height: 100%;\r\n  }\r\n\r\n  a,\r\n  a:hover {\r\n    color: inherit;\r\n    text-decoration: none;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst GlobalStyle: FunctionComponent = function () {\r\n  return <Global styles={defaultStyle} />\r\n}\r\n\r\nexport default GlobalStyle\r\n","// 소개 페이지에 사용되는 프로필 이미지\r\n\r\nimport styled from '@emotion/styled'\r\nimport { GatsbyImage, IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport { FunctionComponent } from 'react'\r\n\r\n// Type\r\ntype ProfileImageProps = {\r\n  profileImage: IGatsbyImageData\r\n}\r\n\r\n// CSS\r\nconst ProfileImageWrapper = styled(GatsbyImage)`\r\n  width: 120px;\r\n  height: 120px;\r\n  margin-bottom: 30px;\r\n  border-radius: 50%;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n`\r\n\r\n// Component\r\nconst ProfileImage: FunctionComponent<ProfileImageProps> = function ({\r\n  profileImage,\r\n}) {\r\n  return <ProfileImageWrapper image={profileImage} alt=\"Profile Image\" />\r\n}\r\n\r\nexport default ProfileImage\r\n","import styled from '@emotion/styled'\r\nimport { FunctionComponent } from 'react'\r\nimport ProfileImage from './ProfileImage'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\n\r\n// Type\r\ntype IntroductionProps = {\r\n  profileImage: IGatsbyImageData\r\n}\r\n\r\n// CSS\r\nconst Background = styled.div`\r\n  width: 100%;\r\n  background-image: linear-gradient(60deg, #29323c 0%, #485563 100%);\r\n  color: #ffffff;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: flex-start;\r\n  width: 768px;\r\n  height: 400px;\r\n  margin: 0 auto;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    height: 300px;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst Title = styled.div`\r\n  margin-top: 5px;\r\n  font-size: 35px;\r\n  font-weight: 700;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 25px;\r\n  }\r\n`\r\n\r\nconst SubTitle = styled.div`\r\n  font-size: 20px;\r\n  font-weight: 400;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 15px;\r\n  }\r\n`\r\n\r\n// Code\r\nconst Introduction: FunctionComponent<IntroductionProps> = function ({\r\n  profileImage,\r\n}) {\r\n  return (\r\n    <Background>\r\n      <Wrapper>\r\n        <ProfileImage profileImage={profileImage} />\r\n\r\n        <div>\r\n          <SubTitle>Nice to Meet You,</SubTitle>\r\n          <Title>I'm Junior Frontend Developer 2Zerozero.</Title>\r\n        </div>\r\n      </Wrapper>\r\n    </Background>\r\n  )\r\n}\r\n\r\nexport default Introduction\r\n","// 카테고리 리스트\r\nimport React, { FunctionComponent, ReactNode } from 'react'\r\nimport styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\n\r\n//CSS\r\nconst CategoryListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  width: 768px;\r\n  margin: 100px auto 0;\r\n\r\n  @media (max-width: 768px) {\r\n    width: 100%;\r\n    margin-top: 50px;\r\n    padding: 0 20px;\r\n  }\r\n`\r\n\r\nconst CategoryItem = styled(({ active, ...props }: GatsbyLinkProps) => (\r\n  <Link {...props} />\r\n))<CategoryItemProps>`\r\n  margin-right: 20px;\r\n  padding: 5px 0;\r\n  font-size: 18px;\r\n  font-weight: ${({ active }) => (active ? '800' : '400')};\r\n  cursor: pointer;\r\n\r\n  &:last-of-type {\r\n    margin-right: 0;\r\n  }\r\n`\r\n\r\n//Type\r\nexport type CategoryListProps = {\r\n  selectedCategory: String\r\n  categoryList: {\r\n    // 키는 문자열, 값은 숫자로 타입 표기\r\n    [key: string]: number\r\n  }\r\n}\r\n\r\ntype CategoryItemProps = {\r\n  active: boolean\r\n}\r\n\r\ntype GatsbyLinkProps = {\r\n  children: ReactNode\r\n  className?: string\r\n  to: string\r\n} & CategoryItemProps\r\n\r\n//Component\r\nconst CategoryList: FunctionComponent<CategoryListProps> = function ({\r\n  selectedCategory,\r\n  categoryList,\r\n}) {\r\n  return (\r\n    <CategoryListWrapper>\r\n      {/* Object.entries 객체의 키-값 쌍을 배열 형태로 반환 */}\r\n      {Object.entries(categoryList).map(([name, count]) => (\r\n        <CategoryItem\r\n          to={`/?category=${name}`}\r\n          active={name === selectedCategory}\r\n          key={name}\r\n        >\r\n          #{name}({count})\r\n        </CategoryItem>\r\n      ))}\r\n    </CategoryListWrapper>\r\n  )\r\n}\r\n\r\nexport default CategoryList\r\n","import styled from '@emotion/styled'\r\nimport { Link } from 'gatsby'\r\nimport { GatsbyImage } from 'gatsby-plugin-image'\r\nimport { FunctionComponent } from 'react'\r\nimport { PostFrontmatterType } from 'types/PostItem.types'\r\n\r\n// Type\r\ntype PostItemProps = PostFrontmatterType & { link: string }\r\n\r\n// CSS\r\nconst PostItemWrapper = styled(Link)`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-radius: 10px;\r\n  box-shadow: 0 0 8px rgba(0, 0, 0, 0.15);\r\n  transition: 0.3s box-shadow;\r\n  cursor: pointer;\r\n\r\n  &:hover {\r\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);\r\n  }\r\n`\r\n\r\nconst ThumbnailImage = styled(GatsbyImage)`\r\n  width: 100%;\r\n  height: 200px;\r\n  border-radius: 10px 10px 0 0;\r\n`\r\n\r\nconst PostItemContent = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 15px;\r\n`\r\n\r\nconst Title = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-bottom: 3px;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 20px;\r\n  font-weight: 700;\r\n`\r\n\r\nconst Date = styled.div`\r\n  font-size: 14px;\r\n  font-weight: 400;\r\n  opacity: 0.7;\r\n`\r\n\r\nconst Category = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  margin-top: 10px;\r\n  margin: 10px -5px;\r\n`\r\n\r\nconst CategoryItem = styled.div`\r\n  margin: 2.5px 5px;\r\n  padding: 3px 5px;\r\n  border-radius: 3px;\r\n  background: black;\r\n  font-size: 14px;\r\n  font-weight: 700;\r\n  color: white;\r\n`\r\n\r\nconst Summary = styled.div`\r\n  display: -webkit-box;\r\n  overflow: hidden;\r\n  margin-top: auto;\r\n  text-overflow: ellipsis;\r\n  white-space: normal;\r\n  overflow-wrap: break-word;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  font-size: 16px;\r\n  opacity: 0.8;\r\n`\r\n\r\n// Component\r\nconst PostItem: FunctionComponent<PostItemProps> = function ({\r\n  title,\r\n  date,\r\n  categories,\r\n  summary,\r\n  thumbnail: {\r\n    childImageSharp: { gatsbyImageData },\r\n  },\r\n  link,\r\n}) {\r\n  return (\r\n    <PostItemWrapper to={link}>\r\n      <ThumbnailImage image={gatsbyImageData} alt=\"Post Item Image\" />\r\n      <PostItemContent>\r\n        <Title>{title}</Title>\r\n        <Date>{date}</Date>\r\n        <Category>\r\n          {categories.map(category => (\r\n            <CategoryItem key={category}>{category}</CategoryItem>\r\n          ))}\r\n        </Category>\r\n        <Summary>{summary}</Summary>\r\n      </PostItemContent>\r\n    </PostItemWrapper>\r\n  )\r\n}\r\n\r\nexport default PostItem\r\n","import { MutableRefObject, useEffect, useMemo, useRef, useState } from 'react'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\n\r\n// Type\r\nexport type useInfiniteScrollType = {\r\n  containerRef: MutableRefObject<HTMLDivElement | null>\r\n  postList: PostListItemType[]\r\n}\r\n\r\n// 페이지당 불러올 아이템 갯수\r\nconst NUMBER_OF_ITEMS_PER_PAGE = 10\r\n\r\n// 무한 스크롤\r\nconst useInfiniteScroll = function (\r\n  selectedCategory: string,\r\n  posts: PostListItemType[],\r\n): useInfiniteScrollType {\r\n  // 스크롤 컨테이너 ref\r\n  const containerRef: MutableRefObject<HTMLDivElement | null> =\r\n    useRef<HTMLDivElement>(null)\r\n\r\n  // 스크롤 컨테이너 관찰자\r\n  const observer: MutableRefObject<IntersectionObserver | null> =\r\n    useRef<IntersectionObserver>(null)\r\n\r\n  // 현재 페이지 수\r\n  const [count, setCount] = useState<number>(1)\r\n\r\n  // 카테고리별 포스트 필터링\r\n  const postListByCategory = useMemo<PostListItemType[]>(\r\n    () =>\r\n      posts.filter(\r\n        ({\r\n          node: {\r\n            frontmatter: { categories },\r\n          },\r\n        }: PostListItemType) =>\r\n          selectedCategory !== 'All'\r\n            ? categories.includes(selectedCategory)\r\n            : true,\r\n      ),\r\n    [selectedCategory],\r\n  )\r\n\r\n  // 스크롤 컨테이너 관찰자 설정\r\n  useEffect(() => {\r\n    observer.current = new IntersectionObserver((entries, observer) => {\r\n      if (!entries[0].isIntersecting) return\r\n\r\n      setCount(value => value + 1)\r\n      observer.unobserve(entries[0].target)\r\n    })\r\n  }, [])\r\n\r\n  // 카테고리 변경 시 페이지 수 초기화\r\n  useEffect(() => setCount(1), [selectedCategory])\r\n\r\n  // 스크롤 컨테이너 관찰자 설정\r\n  useEffect(() => {\r\n    if (\r\n      NUMBER_OF_ITEMS_PER_PAGE * count >= postListByCategory.length ||\r\n      containerRef.current === null ||\r\n      containerRef.current.children.length === 0 ||\r\n      observer.current === null\r\n    )\r\n      return\r\n\r\n    observer.current.observe(\r\n      containerRef.current.children[containerRef.current.children.length - 1],\r\n    )\r\n  }, [count, selectedCategory])\r\n\r\n  return {\r\n    containerRef,\r\n    postList: postListByCategory.slice(0, count * NUMBER_OF_ITEMS_PER_PAGE),\r\n  }\r\n}\r\n\r\nexport default useInfiniteScroll\r\n\r\n/*\r\n이 코드는 무한 스크롤 기능을 구현하는 커스텀 훅입니다. 주요 기능은 다음과 같습니다:\r\n\r\n1. 포스트 필터링\r\n- selectedCategory에 따라 포스트를 필터링합니다\r\n- 'All' 카테고리가 선택된 경우 모든 포스트를 표시\r\n- 특정 카테고리가 선택된 경우 해당 카테고리의 포스트만 필터링\r\n\r\n2. Intersection Observer 설정\r\n- 스크롤 컨테이너의 마지막 요소를 관찰\r\n- 마지막 요소가 화면에 보이면(isIntersecting) count를 1 증가시킴\r\n- count 증가로 더 많은 포스트가 로드됨\r\n\r\n3. 카테고리 변경 처리\r\n- 카테고리가 변경될 때마다 count를 1로 초기화\r\n- 새로운 카테고리의 첫 페이지부터 표시\r\n\r\n4. 스크롤 감지 및 포스트 로드\r\n- NUMBER_OF_ITEMS_PER_PAGE * count로 표시할 포스트 수 계산\r\n- 컨테이너의 마지막 요소를 관찰하여 추가 로드 시점 결정\r\n- 모든 포스트가 로드되면 추가 관찰 중지\r\n\r\n5. 반환값\r\n- containerRef: 스크롤 컨테이너 참조\r\n- postList: 현재 표시할 포스트 목록\r\n*/\r\n","import styled from '@emotion/styled'\r\nimport { FunctionComponent, useMemo } from 'react'\r\nimport PostItem from './PostItem'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport useInfiniteScroll, {\r\n  useInfiniteScrollType,\r\n} from 'hooks/useInfiniteScroll'\r\n\r\n// Type\r\ntype PostListProps = {\r\n  selectedCategory: string\r\n  posts: PostListItemType[]\r\n}\r\n\r\n// CSS\r\nconst PostListWrapper = styled.div`\r\n  display: flex;\r\n  width: 768px;\r\n  flex-wrap: wrap;\r\n  gap: 20px;\r\n  margin: 0 auto;\r\n  padding: 50px 0 100px;\r\n\r\n  & > * {\r\n    flex: 1 1 calc(50% - 20px); /* 두 개의 열로 나누기 */\r\n  }\r\n\r\n  @media (max-width: 768px) {\r\n    flex-direction: column;\r\n    width: 100%;\r\n    padding: 50px 20px;\r\n  }\r\n`\r\n\r\n// Component\r\nconst PostList: FunctionComponent<PostListProps> = function ({\r\n  selectedCategory,\r\n  posts,\r\n}) {\r\n  const { containerRef, postList }: useInfiniteScrollType = useInfiniteScroll(\r\n    selectedCategory,\r\n    posts,\r\n  )\r\n\r\n  return (\r\n    <PostListWrapper ref={containerRef}>\r\n      {postList.map(\r\n        ({\r\n          node: {\r\n            id,\r\n            fields: { slug },\r\n            frontmatter,\r\n          },\r\n        }: PostListItemType) => (\r\n          <PostItem {...frontmatter} link={slug} key={id} />\r\n        ),\r\n      )}\r\n    </PostListWrapper>\r\n  )\r\n}\r\n\r\nexport default PostList\r\n","const token = '%[a-f0-9]{2}';\nconst singleMatcher = new RegExp('(' + token + ')|([^%]+?)', 'gi');\nconst multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn [decodeURIComponent(components.join(''))];\n\t} catch {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tconst left = components.slice(0, split);\n\tconst right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch {\n\t\tlet tokens = input.match(singleMatcher) || [];\n\n\t\tfor (let i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher) || [];\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tconst replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD',\n\t};\n\n\tlet match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch {\n\t\t\tconst result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tconst entries = Object.keys(replaceMap);\n\n\tfor (const key of entries) {\n\t\t// Replace all decoded components\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nexport default function decodeUriComponent(encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n}\n","export function includeKeys(object, predicate) {\n\tconst result = {};\n\n\tif (Array.isArray(predicate)) {\n\t\tfor (const key of predicate) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor?.enumerable) {\n\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// `Reflect.ownKeys()` is required to retrieve symbol properties\n\t\tfor (const key of Reflect.ownKeys(object)) {\n\t\t\tconst descriptor = Object.getOwnPropertyDescriptor(object, key);\n\t\t\tif (descriptor.enumerable) {\n\t\t\t\tconst value = object[key];\n\t\t\t\tif (predicate(key, value, object)) {\n\t\t\t\t\tObject.defineProperty(result, key, descriptor);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn result;\n}\n\nexport function excludeKeys(object, predicate) {\n\tif (Array.isArray(predicate)) {\n\t\tconst set = new Set(predicate);\n\t\treturn includeKeys(object, key => !set.has(key));\n\t}\n\n\treturn includeKeys(object, (key, value, object) => !predicate(key, value, object));\n}\n","export default function splitOnFirst(string, separator) {\n\tif (!(typeof string === 'string' && typeof separator === 'string')) {\n\t\tthrow new TypeError('Expected the arguments to be of type `string`');\n\t}\n\n\tif (string === '' || separator === '') {\n\t\treturn [];\n\t}\n\n\tconst separatorIndex = string.indexOf(separator);\n\n\tif (separatorIndex === -1) {\n\t\treturn [];\n\t}\n\n\treturn [\n\t\tstring.slice(0, separatorIndex),\n\t\tstring.slice(separatorIndex + separator.length)\n\t];\n}\n","import decodeComponent from 'decode-uri-component';\nimport {includeKeys} from 'filter-obj';\nimport splitOnFirst from 'split-on-first';\n\nconst isNullOrUndefined = value => value === null || value === undefined;\n\n// eslint-disable-next-line unicorn/prefer-code-point\nconst strictUriEncode = string => encodeURIComponent(string).replaceAll(/[!'()*]/g, x => `%${x.charCodeAt(0).toString(16).toUpperCase()}`);\n\nconst encodeFragmentIdentifier = Symbol('encodeFragmentIdentifier');\n\nfunction encoderForArrayFormat(options) {\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tconst index = result.length;\n\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result, [encode(key, options), '[', index, ']'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[', encode(index, options), ']=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), '[]'].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '[]=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\t[encode(key, options), ':list='].join(''),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), ':list=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator':\n\t\tcase 'bracket-separator': {\n\t\t\tconst keyValueSeparator = options.arrayFormat === 'bracket-separator'\n\t\t\t\t? '[]='\n\t\t\t\t: '=';\n\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\t// Translate null to an empty string so that it doesn't serialize as 'null'\n\t\t\t\tvalue = value === null ? '' : value;\n\n\t\t\t\tif (result.length === 0) {\n\t\t\t\t\treturn [[encode(key, options), keyValueSeparator, encode(value, options)].join('')];\n\t\t\t\t}\n\n\t\t\t\treturn [[result, encode(value, options)].join(options.arrayFormatSeparator)];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn key => (result, value) => {\n\t\t\t\tif (\n\t\t\t\t\tvalue === undefined\n\t\t\t\t\t|| (options.skipNull && value === null)\n\t\t\t\t\t|| (options.skipEmptyString && value === '')\n\t\t\t\t) {\n\t\t\t\t\treturn result;\n\t\t\t\t}\n\n\t\t\t\tif (value === null) {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t...result,\n\t\t\t\t\t\tencode(key, options),\n\t\t\t\t\t];\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\t...result,\n\t\t\t\t\t[encode(key, options), '=', encode(value, options)].join(''),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction parserForArrayFormat(options) {\n\tlet result;\n\n\tswitch (options.arrayFormat) {\n\t\tcase 'index': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /\\[(\\d*)]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(\\[])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'colon-list-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tresult = /(:list)$/.exec(key);\n\t\t\t\tkey = key.replace(/:list$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], value];\n\t\t\t};\n\t\t}\n\n\t\tcase 'comma':\n\t\tcase 'separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = typeof value === 'string' && value.includes(options.arrayFormatSeparator);\n\t\t\t\tconst isEncodedArray = (typeof value === 'string' && !isArray && decode(value, options).includes(options.arrayFormatSeparator));\n\t\t\t\tvalue = isEncodedArray ? decode(value, options) : value;\n\t\t\t\tconst newValue = isArray || isEncodedArray ? value.split(options.arrayFormatSeparator).map(item => decode(item, options)) : (value === null ? value : decode(value, options));\n\t\t\t\taccumulator[key] = newValue;\n\t\t\t};\n\t\t}\n\n\t\tcase 'bracket-separator': {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tconst isArray = /(\\[])$/.test(key);\n\t\t\t\tkey = key.replace(/\\[]$/, '');\n\n\t\t\t\tif (!isArray) {\n\t\t\t\t\taccumulator[key] = value ? decode(value, options) : value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst arrayValue = value === null\n\t\t\t\t\t? []\n\t\t\t\t\t: decode(value, options).split(options.arrayFormatSeparator);\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = arrayValue;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...accumulator[key], ...arrayValue];\n\t\t\t};\n\t\t}\n\n\t\tdefault: {\n\t\t\treturn (key, value, accumulator) => {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [...[accumulator[key]].flat(), value];\n\t\t\t};\n\t\t}\n\t}\n}\n\nfunction validateArrayFormatSeparator(value) {\n\tif (typeof value !== 'string' || value.length !== 1) {\n\t\tthrow new TypeError('arrayFormatSeparator must be single character string');\n\t}\n}\n\nfunction encode(value, options) {\n\tif (options.encode) {\n\t\treturn options.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction decode(value, options) {\n\tif (options.decode) {\n\t\treturn decodeComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t}\n\n\tif (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input))\n\t\t\t.sort((a, b) => Number(a) - Number(b))\n\t\t\t.map(key => input[key]);\n\t}\n\n\treturn input;\n}\n\nfunction removeHash(input) {\n\tconst hashStart = input.indexOf('#');\n\tif (hashStart !== -1) {\n\t\tinput = input.slice(0, hashStart);\n\t}\n\n\treturn input;\n}\n\nfunction getHash(url) {\n\tlet hash = '';\n\tconst hashStart = url.indexOf('#');\n\tif (hashStart !== -1) {\n\t\thash = url.slice(hashStart);\n\t}\n\n\treturn hash;\n}\n\nfunction parseValue(value, options, type) {\n\tif (type === 'string' && typeof value === 'string') {\n\t\treturn value;\n\t}\n\n\tif (typeof type === 'function' && typeof value === 'string') {\n\t\treturn type(value);\n\t}\n\n\tif (options.parseBooleans && value !== null && (value.toLowerCase() === 'true' || value.toLowerCase() === 'false')) {\n\t\treturn value.toLowerCase() === 'true';\n\t}\n\n\tif (type === 'number' && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\treturn Number(value);\n\t}\n\n\tif (options.parseNumbers && !Number.isNaN(Number(value)) && (typeof value === 'string' && value.trim() !== '')) {\n\t\treturn Number(value);\n\t}\n\n\treturn value;\n}\n\nexport function extract(input) {\n\tinput = removeHash(input);\n\tconst queryStart = input.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\n\treturn input.slice(queryStart + 1);\n}\n\nexport function parse(query, options) {\n\toptions = {\n\t\tdecode: true,\n\t\tsort: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\tparseNumbers: false,\n\t\tparseBooleans: false,\n\t\ttypes: Object.create(null),\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst formatter = parserForArrayFormat(options);\n\n\t// Create an object with no prototype\n\tconst returnValue = Object.create(null);\n\n\tif (typeof query !== 'string') {\n\t\treturn returnValue;\n\t}\n\n\tquery = query.trim().replace(/^[?#&]/, '');\n\n\tif (!query) {\n\t\treturn returnValue;\n\t}\n\n\tfor (const parameter of query.split('&')) {\n\t\tif (parameter === '') {\n\t\t\tcontinue;\n\t\t}\n\n\t\tconst parameter_ = options.decode ? parameter.replaceAll('+', ' ') : parameter;\n\n\t\tlet [key, value] = splitOnFirst(parameter_, '=');\n\n\t\tif (key === undefined) {\n\t\t\tkey = parameter_;\n\t\t}\n\n\t\t// Missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tvalue = value === undefined ? null : (['comma', 'separator', 'bracket-separator'].includes(options.arrayFormat) ? value : decode(value, options));\n\t\tformatter(decode(key, options), value, returnValue);\n\t}\n\n\tfor (const [key, value] of Object.entries(returnValue)) {\n\t\tif (typeof value === 'object' && value !== null && options.types[key] !== 'string') {\n\t\t\tfor (const [key2, value2] of Object.entries(value)) {\n\t\t\t\tconst type = options.types[key] ? options.types[key].replace('[]', '') : undefined;\n\t\t\t\tvalue[key2] = parseValue(value2, options, type);\n\t\t\t}\n\t\t} else if (typeof value === 'object' && value !== null && options.types[key] === 'string') {\n\t\t\treturnValue[key] = Object.values(value).join(options.arrayFormatSeparator);\n\t\t} else {\n\t\t\treturnValue[key] = parseValue(value, options, options.types[key]);\n\t\t}\n\t}\n\n\tif (options.sort === false) {\n\t\treturn returnValue;\n\t}\n\n\t// TODO: Remove the use of `reduce`.\n\t// eslint-disable-next-line unicorn/no-array-reduce\n\treturn (options.sort === true ? Object.keys(returnValue).sort() : Object.keys(returnValue).sort(options.sort)).reduce((result, key) => {\n\t\tconst value = returnValue[key];\n\t\tresult[key] = Boolean(value) && typeof value === 'object' && !Array.isArray(value) ? keysSorter(value) : value;\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexport function stringify(object, options) {\n\tif (!object) {\n\t\treturn '';\n\t}\n\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none',\n\t\tarrayFormatSeparator: ',',\n\t\t...options,\n\t};\n\n\tvalidateArrayFormatSeparator(options.arrayFormatSeparator);\n\n\tconst shouldFilter = key => (\n\t\t(options.skipNull && isNullOrUndefined(object[key]))\n\t\t|| (options.skipEmptyString && object[key] === '')\n\t);\n\n\tconst formatter = encoderForArrayFormat(options);\n\n\tconst objectCopy = {};\n\n\tfor (const [key, value] of Object.entries(object)) {\n\t\tif (!shouldFilter(key)) {\n\t\t\tobjectCopy[key] = value;\n\t\t}\n\t}\n\n\tconst keys = Object.keys(objectCopy);\n\n\tif (options.sort !== false) {\n\t\tkeys.sort(options.sort);\n\t}\n\n\treturn keys.map(key => {\n\t\tconst value = object[key];\n\n\t\tif (value === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (value === null) {\n\t\t\treturn encode(key, options);\n\t\t}\n\n\t\tif (Array.isArray(value)) {\n\t\t\tif (value.length === 0 && options.arrayFormat === 'bracket-separator') {\n\t\t\t\treturn encode(key, options) + '[]';\n\t\t\t}\n\n\t\t\treturn value\n\t\t\t\t.reduce(formatter(key), [])\n\t\t\t\t.join('&');\n\t\t}\n\n\t\treturn encode(key, options) + '=' + encode(value, options);\n\t}).filter(x => x.length > 0).join('&');\n}\n\nexport function parseUrl(url, options) {\n\toptions = {\n\t\tdecode: true,\n\t\t...options,\n\t};\n\n\tlet [url_, hash] = splitOnFirst(url, '#');\n\n\tif (url_ === undefined) {\n\t\turl_ = url;\n\t}\n\n\treturn {\n\t\turl: url_?.split('?')?.[0] ?? '',\n\t\tquery: parse(extract(url), options),\n\t\t...(options && options.parseFragmentIdentifier && hash ? {fragmentIdentifier: decode(hash, options)} : {}),\n\t};\n}\n\nexport function stringifyUrl(object, options) {\n\toptions = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\t[encodeFragmentIdentifier]: true,\n\t\t...options,\n\t};\n\n\tconst url = removeHash(object.url).split('?')[0] || '';\n\tconst queryFromUrl = extract(object.url);\n\n\tconst query = {\n\t\t...parse(queryFromUrl, {sort: false}),\n\t\t...object.query,\n\t};\n\n\tlet queryString = stringify(query, options);\n\tqueryString &&= `?${queryString}`;\n\n\tlet hash = getHash(object.url);\n\tif (typeof object.fragmentIdentifier === 'string') {\n\t\tconst urlObjectForFragmentEncode = new URL(url);\n\t\turlObjectForFragmentEncode.hash = object.fragmentIdentifier;\n\t\thash = options[encodeFragmentIdentifier] ? urlObjectForFragmentEncode.hash : `#${object.fragmentIdentifier}`;\n\t}\n\n\treturn `${url}${queryString}${hash}`;\n}\n\nexport function pick(input, filter, options) {\n\toptions = {\n\t\tparseFragmentIdentifier: true,\n\t\t[encodeFragmentIdentifier]: false,\n\t\t...options,\n\t};\n\n\tconst {url, query, fragmentIdentifier} = parseUrl(input, options);\n\n\treturn stringifyUrl({\n\t\turl,\n\t\tquery: includeKeys(query, filter),\n\t\tfragmentIdentifier,\n\t}, options);\n}\n\nexport function exclude(input, filter, options) {\n\tconst exclusionFilter = Array.isArray(filter) ? key => !filter.includes(key) : (key, value) => !filter(key, value);\n\n\treturn pick(input, exclusionFilter, options);\n}\n","import * as queryString from './base.js';\n\nexport default queryString;\n","import styled from '@emotion/styled'\r\nimport React, { FunctionComponent } from 'react'\r\n\r\n// CSS\r\nconst FooterWrapper = styled.footer`\r\n  display: flex;\r\n  padding: 50px 0;\r\n  justify-content: center;\r\n  text-align: center;\r\n  font-size: 15px;\r\n  line-height: 1.5;\r\n\r\n  @media (max-width: 768px) {\r\n    font-size: 13px;\r\n  }\r\n`\r\n\r\n// Code\r\nconst Footer: FunctionComponent = function () {\r\n  return (\r\n    <FooterWrapper>\r\n      Thank You for Visiting My Blog, Have a Good Day 😆 <br />\r\n      2024 Developer 2Zerozero, Powered By Gatsby.\r\n    </FooterWrapper>\r\n  )\r\n}\r\n\r\nexport default Footer\r\n","import { FunctionComponent, ReactNode } from 'react'\r\nimport GlobalStyle from './GlobalStyle'\r\nimport Footer from './Footer'\r\nimport styled from '@emotion/styled'\r\nimport { Helmet } from 'react-helmet'\r\n\r\n// Type\r\ntype TemplateProps = {\r\n  title: string\r\n  description: string\r\n  url: string\r\n  image: string\r\n  children: ReactNode\r\n}\r\n\r\n// CSS\r\nconst Container = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\n// Component\r\nconst Template: FunctionComponent<TemplateProps> = function ({\r\n  title,\r\n  description,\r\n  url,\r\n  image,\r\n  children,\r\n}) {\r\n  return (\r\n    <Container>\r\n      {/* SEO */}\r\n      <Helmet>\r\n        <title>{title}</title>\r\n\r\n        <meta name=\"description\" content={description} />\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n        <meta httpEquiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\r\n\r\n        <meta property=\"og:type\" content=\"website\" />\r\n        <meta property=\"og:title\" content={title} />\r\n        <meta property=\"og:description\" content={description} />\r\n        <meta property=\"og:image\" content={image} />\r\n        <meta property=\"og:url\" content={url} />\r\n        <meta property=\"og:site_name\" content={title} />\r\n\r\n        <meta name=\"twitter:card\" content=\"summary\" />\r\n        <meta name=\"twitter:title\" content={title} />\r\n        <meta name=\"twitter:description\" content={description} />\r\n        <meta name=\"twitter:image\" content={image} />\r\n        <meta name=\"twitter:site\" content=\"2Zerozero\" />\r\n        <meta name=\"twitter:creator\" content=\"2Zerozero\" />\r\n\r\n        <meta\r\n          name=\"google-site-verification\"\r\n          content=\"zlu7Dg5YSEKd5IQ17WHVKxgmjdHy8ICbWK34ycE2NKE\"\r\n        />\r\n\r\n        <html lang=\"ko\" />\r\n      </Helmet>\r\n\r\n      <GlobalStyle />\r\n      {children}\r\n      <Footer />\r\n    </Container>\r\n  )\r\n}\r\n\r\nexport default Template\r\n","import React, { FunctionComponent, useMemo } from 'react'\r\nimport Introduction from 'components/Main/Introduction'\r\nimport CategoryList, { CategoryListProps } from 'components/Main/CategoryList'\r\nimport PostList from 'components/Main/PostList'\r\nimport { graphql } from 'gatsby'\r\nimport { PostListItemType } from 'types/PostItem.types'\r\nimport { IGatsbyImageData } from 'gatsby-plugin-image'\r\nimport queryString, { ParsedQuery } from 'query-string'\r\nimport Template from 'components/Common/Template'\r\n\r\n// Type\r\ntype IndexPageProps = {\r\n  location: {\r\n    search: string\r\n  }\r\n  data: {\r\n    site: {\r\n      siteMetadata: {\r\n        title: string\r\n        description: string\r\n        siteUrl: string\r\n      }\r\n    }\r\n    allMarkdownRemark: {\r\n      edges: PostListItemType[]\r\n    }\r\n    file: {\r\n      childImageSharp: {\r\n        gatsbyImageData: IGatsbyImageData\r\n      }\r\n      publicURL: string\r\n    }\r\n  }\r\n}\r\n\r\n// Component\r\nconst IndexPage: FunctionComponent<IndexPageProps> = function ({\r\n  location: { search },\r\n  data: {\r\n    site: {\r\n      siteMetadata: { title, description, siteUrl },\r\n    },\r\n    allMarkdownRemark: { edges },\r\n    file: {\r\n      childImageSharp: { gatsbyImageData },\r\n      publicURL,\r\n    },\r\n  },\r\n}) {\r\n  // 쿼리 파싱\r\n  const parsed: ParsedQuery<string> = queryString.parse(search)\r\n\r\n  // 선택된 카테고리 조회\r\n  const selectedCategory: string =\r\n    typeof parsed.category !== 'string' || !parsed.category\r\n      ? 'All'\r\n      : parsed.category\r\n\r\n  // 카테고리 리스트 조회\r\n  const categoryList = useMemo(\r\n    () =>\r\n      edges.reduce(\r\n        (\r\n          list: CategoryListProps['categoryList'],\r\n          {\r\n            node: {\r\n              frontmatter: { categories },\r\n            },\r\n          }: PostListItemType,\r\n        ) => {\r\n          categories.forEach(category => {\r\n            if (list[category] === undefined) list[category] = 1\r\n            else list[category]++\r\n          })\r\n\r\n          list['All']++\r\n\r\n          return list\r\n        },\r\n        { All: 0 },\r\n      ),\r\n    [],\r\n  )\r\n\r\n  return (\r\n    <Template\r\n      title={title}\r\n      description={description}\r\n      url={siteUrl}\r\n      image={publicURL}\r\n    >\r\n      <Introduction profileImage={gatsbyImageData} />\r\n      <CategoryList\r\n        selectedCategory={selectedCategory}\r\n        categoryList={categoryList}\r\n      />\r\n      <PostList selectedCategory={selectedCategory} posts={edges} />\r\n    </Template>\r\n  )\r\n}\r\n\r\nexport default IndexPage\r\n\r\n/*\r\n  Gatsby Link API 의 성능상 이점\r\n\r\n  Prefetch 를 통해 리소스의 로딩 속도 향상\r\n\r\n  > 작동방식\r\n  페이지가 로드되면 Gatsby는 리소스 로드 속도 향상을 위해 현제 페이지에서 사용되는 모든 링크를 찾는다.\r\n  그 후 각 링크 페이지를 미리 로드하기 시작\r\n\r\n  이를 통하여 Gatsby 는 더 높은 사용자 경험(UX)을 제공\r\n*/\r\n\r\n// GraphQL\r\nexport const getPostList = graphql`\r\n  query getPostList {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        description\r\n        siteUrl\r\n      }\r\n    }\r\n    allMarkdownRemark(\r\n      sort: { order: DESC, fields: [frontmatter___date, frontmatter___title] }\r\n    ) {\r\n      edges {\r\n        node {\r\n          id\r\n          fields {\r\n            slug\r\n          }\r\n          frontmatter {\r\n            title\r\n            summary\r\n            date(formatString: \"YYYY.MM.DD.\")\r\n            categories\r\n            thumbnail {\r\n              childImageSharp {\r\n                gatsbyImageData(width: 768, height: 400)\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    file(name: { eq: \"profile-image\" }) {\r\n      childImageSharp {\r\n        gatsbyImageData(width: 120, height: 120)\r\n      }\r\n      publicURL\r\n    }\r\n  }\r\n`\r\n"],"names":["defaultStyle","name","styles","___EmotionJSX","Global","ProfileImageWrapper","_styled","GatsbyImage","target","_ref","profileImage","image","alt","Background","Wrapper","Title","SubTitle","ProfileImage","CategoryListWrapper","CategoryItem","active","props","Link","_ref2","_ref3","selectedCategory","categoryList","Object","entries","map","_ref4","count","to","key","PostItemWrapper","ThumbnailImage","PostItemContent","Date","Category","Summary","title","date","categories","summary","thumbnail","childImageSharp","gatsbyImageData","link","category","posts","containerRef","useRef","observer","setCount","useState","postListByCategory","useMemo","filter","node","frontmatter","includes","useEffect","current","IntersectionObserver","isIntersecting","value","unobserve","length","children","observe","postList","slice","PostListWrapper","useInfiniteScroll","ref","id","fields","slug","PostItem","_extends","token","singleMatcher","RegExp","multiMatcher","decodeComponents","components","split","decodeURIComponent","join","left","right","Array","prototype","concat","call","decode","input","tokens","match","i","decodeUriComponent","encodedURI","TypeError","replaceMap","exec","result","keys","replace","customDecodeURIComponent","includeKeys","object","predicate","isArray","descriptor","getOwnPropertyDescriptor","enumerable","defineProperty","Reflect","ownKeys","splitOnFirst","string","separator","separatorIndex","indexOf","isNullOrUndefined","strictUriEncode","encodeURIComponent","replaceAll","x","charCodeAt","toString","toUpperCase","encodeFragmentIdentifier","Symbol","validateArrayFormatSeparator","encode","options","strict","keysSorter","sort","a","b","Number","removeHash","hashStart","parseValue","type","parseBooleans","toLowerCase","isNaN","trim","parseNumbers","extract","queryStart","parse","query","arrayFormat","arrayFormatSeparator","types","create","formatter","accumulator","undefined","isEncodedArray","newValue","item","test","arrayValue","flat","parserForArrayFormat","returnValue","parameter","parameter_","key2","value2","values","reduce","Boolean","stringify","shouldFilter","skipNull","skipEmptyString","index","keyValueSeparator","encoderForArrayFormat","objectCopy","parseUrl","url","url_","hash","parseFragmentIdentifier","fragmentIdentifier","stringifyUrl","queryString","getHash","urlObjectForFragmentEncode","URL","pick","exclude","FooterWrapper","Container","description","Helmet","content","httpEquiv","property","lang","GlobalStyle","Footer","location","search","data","site","siteMetadata","siteUrl","allMarkdownRemark","edges","file","publicURL","parsed","list","forEach","All","Template","Introduction","CategoryList","PostList"],"sourceRoot":""}